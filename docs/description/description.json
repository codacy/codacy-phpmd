[
  {
    "patternId": "rulesets-cleancode.xml-ElseExpression",
    "title": "Eliminate Else Blocks with Early Returns",
    "description": "Improves code clarity by using early returns.",
    "timeToFix": 15,
    "patPatBotReviewed": "2024-05-24T11:34:19.626Z"
  },
  {
    "patternId": "rulesets-cleancode.xml-StaticAccess",
    "title": "Avoid Static Method Access",
    "description": "Reduces dependencies and improves testability.",
    "timeToFix": 15,
    "parameters": [
      {
        "name": "exceptions",
        "description": "Comma-separated class name list of exceptions"
      }
    ],
    "patPatBotReviewed": "2024-05-24T11:34:41.151Z"
  },
  {
    "patternId": "rulesets-codesize.xml-CyclomaticComplexity",
    "title": "Understanding Cyclomatic Complexity",
    "description": "Measure complexity by counting decision points in your code.",
    "parameters": [
      {
        "name": "reportLevel",
        "description": "The Cyclomatic Complexity reporting threshold"
      },
      {
        "name": "showClassesComplexity",
        "description": "Indicate if class average violation should be included"
      },
      {
        "name": "showMethodsComplexity",
        "description": "Indicate if method average violation should be included"
      }
    ],
    "timeToFix": 30,
    "patPatBotReviewed": "2024-05-24T11:35:04.586Z"
  },
  {
    "patternId": "rulesets-codesize.xml-NPathComplexity",
    "title": "Understanding and Managing NPath Complexity",
    "description": "Measures possible code paths in methods.",
    "parameters": [
      {
        "name": "minimum",
        "description": "Reporting threshold"
      }
    ],
    "timeToFix": 30,
    "patPatBotReviewed": "2024-05-24T11:35:24.530Z"
  },
  {
    "patternId": "rulesets-codesize.xml-ExcessiveMethodLength",
    "title": "Avoid Long Methods for Better Code Quality",
    "description": "Flag excessively long methods for refactoring.",
    "parameters": [
      {
        "name": "minimum",
        "description": "Reporting threshold for the number of lines in a method"
      }
    ],
    "timeToFix": 15,
    "patPatBotReviewed": "2024-05-24T11:35:59.055Z"
  },
  {
    "patternId": "rulesets-codesize.xml-ExcessiveClassLength",
    "title": "Optimize Class Size for Better Maintainability",
    "description": "Encourages breaking down lengthy class files.",
    "parameters": [
      {
        "name": "minimum",
        "description": "Reporting threshold for the number of lines in a class"
      }
    ],
    "timeToFix": 15,
    "patPatBotReviewed": "2024-05-24T11:36:37.088Z"
  },
  {
    "patternId": "rulesets-codesize.xml-ExcessiveParameterList",
    "title": "Refactor Long Parameter Lists",
    "description": "Refactor long parameter lists for better maintainability.",
    "parameters": [
      {
        "name": "minimum",
        "description": "Reporting threshold for the number of arguments in a method"
      }
    ],
    "timeToFix": 15,
    "patPatBotReviewed": "2024-05-24T11:37:01.827Z"
  },
  {
    "patternId": "rulesets-codesize.xml-ExcessivePublicCount",
    "title": "Refactor Classes with Excessive Public Members",
    "description": "Too many public methods and attributes in a class.",
    "parameters": [
      {
        "name": "minimum",
        "description": "Reporting threshold for the number of public methods and attributes in a class"
      }
    ],
    "timeToFix": 15,
    "patPatBotReviewed": "2024-05-24T11:37:22.495Z"
  },
  {
    "patternId": "rulesets-codesize.xml-TooManyFields",
    "title": "Minimize Class Field Count",
    "description": "Classes with too many fields can be hard to maintain.",
    "parameters": [
      {
        "name": "maxfields",
        "description": "Reporting threshold for the number of fields in a class"
      }
    ],
    "timeToFix": 15,
    "patPatBotReviewed": "2024-05-24T11:37:49.183Z"
  },
  {
    "patternId": "rulesets-codesize.xml-TooManyMethods",
    "title": "Refactor Classes with Excessive Methods",
    "description": "Classes with too many methods are hard to maintain.",
    "parameters": [
      {
        "name": "maxmethods",
        "description": "Reporting threshold for the number of methods in a class"
      }
    ],
    "timeToFix": 15,
    "patPatBotReviewed": "2024-05-24T11:38:09.790Z"
  },
  {
    "patternId": "rulesets-codesize.xml-ExcessiveClassComplexity",
    "title": "Manage Class Complexity for Better Code Maintainability",
    "description": "Monitor and manage class complexity effectively.",
    "parameters": [
      {
        "name": "maximum",
        "description": "The maximum WMC tolerable for a class"
      }
    ],
    "timeToFix": 10,
    "patPatBotReviewed": "2024-05-24T11:38:32.968Z"
  },
  {
    "patternId": "rulesets-controversial.xml-Superglobals",
    "title": "Encapsulate PHP Superglobal Variables",
    "description": "Avoid direct access to PHP superglobal variables.",
    "timeToFix": 10,
    "patPatBotReviewed": "2024-05-24T11:38:48.061Z"
  },
  {
    "patternId": "rulesets-controversial.xml-CamelCaseClassName",
    "title": "Use CamelCase for PHP Class Names",
    "description": "Ensures PHP classes follow CamelCase naming convention.",
    "timeToFix": 5,
    "patPatBotReviewed": "2024-05-24T11:39:02.495Z"
  },
  {
    "patternId": "rulesets-controversial.xml-CamelCasePropertyName",
    "title": "Use Camel Case for Class Properties",
    "description": "Standardize class properties using camel case.",
    "timeToFix": 5,
    "patPatBotReviewed": "2024-05-24T11:39:16.793Z"
  },
  {
    "patternId": "rulesets-controversial.xml-CamelCaseMethodName",
    "title": "Enforce Camel Case for Method Names",
    "description": "Ensure methods use camel case naming convention.",
    "timeToFix": 5,
    "patPatBotReviewed": "2024-05-24T11:39:42.439Z"
  },
  {
    "patternId": "rulesets-controversial.xml-CamelCaseParameterName",
    "title": "Use Camel Case for Parameter Names",
    "description": "Adopt camel case for clearer parameter naming.",
    "timeToFix": 5,
    "patPatBotReviewed": "2024-05-24T11:39:58.213Z"
  },
  {
    "patternId": "rulesets-controversial.xml-CamelCaseVariableName",
    "title": "Enforce Camel Case for Variable Names",
    "description": "Use camel case for naming variables.",
    "timeToFix": 5,
    "patPatBotReviewed": "2024-05-24T11:40:19.967Z"
  },
  {
    "patternId": "rulesets-design.xml-ExitExpression",
    "title": "Avoid Using Exit Statements in Code",
    "description": "Avoid using exit expressions in regular code.",
    "timeToFix": 10,
    "patPatBotReviewed": "2024-05-24T11:40:38.352Z"
  },
  {
    "patternId": "rulesets-design.xml-EvalExpression",
    "title": "Avoid Using `eval` Expressions",
    "description": "Replace `eval` expressions for security and maintainability.",
    "timeToFix": 15,
    "patPatBotReviewed": "2024-05-24T11:40:54.376Z"
  },
  {
    "patternId": "rulesets-design.xml-GotoStatement",
    "title": "Avoid Using Goto Statements",
    "description": "Promote readability by avoiding `goto` statements.",
    "timeToFix": 10,
    "patPatBotReviewed": "2024-05-24T11:41:26.020Z"
  },
  {
    "patternId": "rulesets-design.xml-NumberOfChildren",
    "title": "Excessive class children number",
    "description": "Avoid classes with too many children",
    "parameters": [
      {
        "name": "minimum",
        "description": "Maximum number of acceptable child classes"
      }
    ],
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-design.xml-DepthOfInheritance",
    "title": "Excessive class parents",
    "description": "Avoid classes with too many parents parents",
    "parameters": [
      {
        "name": "minimum",
        "description": "Maximum number of acceptable parent classes"
      }
    ],
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-unusedcode.xml-UnusedPrivateField",
    "title": "Prohibit unused private variables",
    "description": "Prohibit the definition or assignment of unused private variables",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-unusedcode.xml-UnusedLocalVariable",
    "title": "Prohibit unused variables",
    "description": "Prohibit the definition or assignment of unused local variables",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-unusedcode.xml-UnusedPrivateMethod",
    "title": "Prohibit unused private methods",
    "description": "Prohibit the definition or assignment of unused private methods",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-unusedcode.xml-UnusedFormalParameter",
    "title": "Prohibit unused arguments",
    "description": "Prohibit the definition of unused parameters on methods or constructors",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-naming.xml-ShortVariable",
    "title": "Prohibit short variable names",
    "description": "Detects when a field, local, or parameter has a very short name.",
    "parameters": [
      {
        "name": "minimum",
        "description": "Minimum length for a variable"
      },
      {
        "name": "exceptions",
        "description": "Comma-separated list of exceptions"
      }
    ],
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-naming.xml-LongVariable",
    "title": "Prohibit long variable names",
    "description": "Detects when a field, local, or parameter has a very long name.",
    "parameters": [
      {
        "name": "maximum",
        "description": "Maximum length for a variable"
      }
    ],
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-naming.xml-LongClassName",
    "title": "Avoid excessively long class names",
    "description": "Detects when classes or interfaces are declared with excessively long names.",
    "parameters": [
      {
        "name": "maximum",
        "description": "The class name length reporting threshold"
      },
      {
        "name": "subtract-prefixes",
        "description": "Comma-separated list of prefixes that will not count in the length of the class name. Only the first matching prefix will be subtracted."
      },
      {
        "name": "subtract-suffixes",
        "description": "Comma-separated list of suffixes that will not count in the length of the class name. Only the first matching suffix will be subtracted."
      }
    ],
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-naming.xml-ShortClassName",
    "title": "Avoid classes with short names",
    "description": "Detects when classes or interfaces have a very short name.",
    "parameters": [
      {
        "name": "minimum",
        "description": "The class name length reporting threshold"
      },
      {
        "name": "exceptions",
        "description": "Comma-separated list of exceptions. Example: Log,URL,FTP"
      }
    ],
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-naming.xml-ShortMethodName",
    "title": "Prohibit short method names",
    "description": "Detects when very short method names are used.",
    "parameters": [
      {
        "name": "minimum",
        "description": "Minimum length for a method"
      },
      {
        "name": "exceptions",
        "description": "Comma-separated list of exceptions"
      }
    ],
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-naming.xml-ConstructorWithNameAsEnclosingClass",
    "title": "Prohibit constructor with class name",
    "description": "In PHP 5, a constructor should not have the same name as the enclosing class.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-naming.xml-ConstantNamingConventions",
    "title": "Enforce uppercase constants",
    "description": "Constant names should always be defined in uppercase.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-naming.xml-BooleanGetMethodName",
    "title": "Enforce boolean naming convention",
    "description": "Boolean methods should be called 'isX()' or 'hasX()'",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-design.xml-CouplingBetweenObjects",
    "parameters": [
      {
        "name": "maximum",
        "description": "Maximum number of acceptable dependencies."
      }
    ],
    "title": "Prohibit of coupling between objects",
    "description": "A class needs to have low coupling",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-design.xml-DevelopmentCodeFragment",
    "parameters": [
      {
        "name": "unwanted-functions",
        "description": "Comma separated list of suspect function images."
      },
      {
        "name": "ignore-namespaces",
        "description": "Ignore namespaces when looking for dev. fragments"
      }
    ],
    "title": "Prohibit calling debug function which is mostly used during development.",
    "description": "Functions like var_dump(), print_r() etc. are normally only used during development and therefore such calls in production code are a good indicator that they were just forgotten.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-design.xml-EmptyCatchBlock",
    "parameters": [],
    "title": "Usually empty try-catch",
    "description": "Usually empty try-catch is a bad idea because you are silently swallowing an error condition and then continuing execution.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-design.xml-CountInLoopExpression",
    "parameters": [],
    "title": "Using count/sizeof in loops expressions",
    "description": "Using count/sizeof in loops expressions is considered bad practice and is a potential source of many bugs, especially when the loop manipulates an array, as count happens on each iteration.",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-cleancode.xml-BooleanArgumentFlag",
    "title": "A boolean flag argument is a reliable indicator for a violation of the Single Responsibility Principle (SRP)",
    "description": "You can fix this problem by extracting the logic in the boolean flag into its own class or method",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-cleancode.xml-IfStatementAssignment",
    "title": "Assignments in if clauses and the like are considered a code smell",
    "description": "Assignments in PHP return the right operand as their result. In many cases, this is an expected behavior, but can lead to many difficult to spot bugs, especially when the right operand could result in zero, null or an empty string and the like",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-cleancode.xml-DuplicatedArrayKey",
    "title": "Defining another value for the same key in an array literal overrides the previous key/value, which makes it effectively an unused code",
    "description": "If it's known from the beginning that the key will have different value, there is usually no point in defining first one",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-cleancode.xml-ErrorControlOperator",
    "title": "Error suppression should be avoided if possible as it doesn't just suppress the error that you are trying to stop",
    "description": "Error suppression should be avoided if possible as it doesn't just suppress the error, that you are trying to stop, but will also suppress errors that you didn't predict would ever occur. Consider changing error_reporting() level and/or setting up your own error handler",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-cleancode.xml-MissingImport",
    "title": "Importing all external classes in a file",
    "description": "Importing all external classes in a file through use statements makes them clearly visible",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-cleancode.xml-UndefinedVariable",
    "title": "Detects when a variable is used that has not been defined before",
    "description": "Detects when a variable is used that has not been defined before",
    "timeToFix": 5
  },
  {
    "patternId": "rulesets-codesize.xml-TooManyPublicMethods",
    "title": "Excessive public methods",
    "description": "This pattern reports classes with a high number of public methods.",
    "parameters": [
      {
        "name": "maxmethods",
        "description": "The method count reporting threshold"
      },
      {
        "name": "ignorepattern",
        "description": "Ignore methods matching this regex"
      }
    ],
    "timeToFix": 5
  }
]